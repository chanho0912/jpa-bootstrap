package persistence.sql.ddl.query;

import database.H2;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import persistence.meta.Metadata;
import persistence.meta.MetadataImpl;
import persistence.sql.ddl.fixtures.TestEntityWithAutoIdStrategy;
import persistence.sql.ddl.fixtures.TestEntityWithIdentityIdStrategy;
import persistence.sql.ddl.fixtures.TestEntityWithNullableColumns;
import persistence.sql.ddl.fixtures.TestEntityWithTransientColumn;

import java.sql.SQLException;

import static org.assertj.core.api.Assertions.assertThat;

class CreateTableQueryBuilderTest {
    private final Metadata metadata = new MetadataImpl(new H2());

    CreateTableQueryBuilderTest() throws SQLException {
    }

    @Test
    @DisplayName("Should create create table query for TestEntityWithAutoIdStrategy")
    void createTable_TestEntityWithAutoIdStrategy() {
        String query = new CreateTableQueryBuilder(
                TestEntityWithAutoIdStrategy.class,
                metadata
        ).build();

        assertThat(query).isEqualTo(
                "CREATE TABLE TestEntityWithAutoIdStrategy " +
                        "(id BIGINT, PRIMARY KEY (id));");
    }

    @Test
    @DisplayName("Should create a CREATE TABLE query for TestEntityWithIdentityIdStrategy")
    void createTable_TestEntityWithIdentityIdStrategy() {
        String query = new CreateTableQueryBuilder(
                TestEntityWithIdentityIdStrategy.class,
                metadata
        ).build();

        assertThat(query).isEqualTo(
                "CREATE TABLE TestEntityWithIdentityIdStrategy " +
                        "(id BIGINT GENERATED BY DEFAULT AS IDENTITY, PRIMARY KEY (id));"
        );
    }

    @Test
    @DisplayName("Should create a CREATE TABLE query for TestEntityWithNullableColumns")
    void createTable_TestEntityWithNullableColumns() {
        String query = new CreateTableQueryBuilder(
                TestEntityWithNullableColumns.class,
                metadata
        ).build();

        assertThat(query).isEqualTo(
                "CREATE TABLE TestEntityWithNullableColumns " +
                        "(id BIGINT GENERATED BY DEFAULT AS IDENTITY, nullableColumn1 VARCHAR(255), " +
                        "nullableColumn2 VARCHAR(255), " +
                        "nonNullableColumn VARCHAR(255) NOT NULL, " +
                        "PRIMARY KEY (id));"
        );
    }

    @Test
    @DisplayName("Should create a CREATE TABLE query for TestEntityWithTransientColumn")
    void createTable_TestEntityWithTransientColumn() {
        String query = new CreateTableQueryBuilder(
                TestEntityWithTransientColumn.class,
                metadata
        ).build();

        assertThat(query).isEqualTo(
                "CREATE TABLE TestEntityWithTransientColumn " +
                        "(id BIGINT GENERATED BY DEFAULT AS IDENTITY, normalColumn VARCHAR(255), " +
                        "PRIMARY KEY (id));"
        );
    }
}
